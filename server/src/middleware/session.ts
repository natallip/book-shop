import { Injectable, NestMiddleware } from '@nestjs/common';
import { Request, Response, NextFunction } from 'express';
import { UsersService } from '../users/users.service';
import { AuthService } from '../auth/auth.service';
import * as jwt from 'jsonwebtoken';

@Injectable()
export class SessionMiddleware implements NestMiddleware {
  constructor(
    private readonly usersService: UsersService,
    private readonly authService: AuthService,
  ) {}

  async use(req: Request, res: Response, next: NextFunction) {
    const refreshToken = req.cookies?.['refresh_token'] as string;

    if (!refreshToken) return next();

    try {
      const payload = jwt.verify(refreshToken, process.env.REFRESH_SECRET!) as {
        userId: number;
        email: string;
        roles: string[];
      };

      const user = await this.usersService.findById(payload.userId);
      const userWithoutPassword = { ...user };
      delete userWithoutPassword.password;

      if (user) {
        req.user = user;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π access token
        const accessToken = this.authService.generateAccessToken(user);

        // –°—Ç–∞–≤–∏–º access —Ç–æ–∫–µ–Ω –≤ cookie ‚Äî –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –µ–≥–æ –≤ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
        res.cookie('access_token', accessToken, {
          httpOnly: true, // üîê –±–µ–∑–æ–ø–∞—Å–Ω—ã–π
          secure: true, // —Ç–æ–ª—å–∫–æ –ø–æ HTTPS
          sameSite: 'strict',
          maxAge: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
        });
        // res.json({ accessToken, user: userWithoutPassword });
        // console.log('res', res.cookie);
      }
    } catch (err) {
      console.log(err);
      // –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    }

    next();
  }
}
